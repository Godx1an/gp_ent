// Code generated by ent, DO NOT EDIT.

package ent_work

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Godx1an/gp_ent/pkg/ent_work/predicate"
	"github.com/Godx1an/gp_ent/pkg/ent_work/schoolfitnesstestitem"
)

// SchoolFitnessTestItemDelete is the builder for deleting a SchoolFitnessTestItem entity.
type SchoolFitnessTestItemDelete struct {
	config
	hooks    []Hook
	mutation *SchoolFitnessTestItemMutation
}

// Where appends a list predicates to the SchoolFitnessTestItemDelete builder.
func (sftid *SchoolFitnessTestItemDelete) Where(ps ...predicate.SchoolFitnessTestItem) *SchoolFitnessTestItemDelete {
	sftid.mutation.Where(ps...)
	return sftid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sftid *SchoolFitnessTestItemDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sftid.sqlExec, sftid.mutation, sftid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sftid *SchoolFitnessTestItemDelete) ExecX(ctx context.Context) int {
	n, err := sftid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sftid *SchoolFitnessTestItemDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(schoolfitnesstestitem.Table, sqlgraph.NewFieldSpec(schoolfitnesstestitem.FieldID, field.TypeInt64))
	if ps := sftid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sftid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sftid.mutation.done = true
	return affected, err
}

// SchoolFitnessTestItemDeleteOne is the builder for deleting a single SchoolFitnessTestItem entity.
type SchoolFitnessTestItemDeleteOne struct {
	sftid *SchoolFitnessTestItemDelete
}

// Where appends a list predicates to the SchoolFitnessTestItemDelete builder.
func (sftido *SchoolFitnessTestItemDeleteOne) Where(ps ...predicate.SchoolFitnessTestItem) *SchoolFitnessTestItemDeleteOne {
	sftido.sftid.mutation.Where(ps...)
	return sftido
}

// Exec executes the deletion query.
func (sftido *SchoolFitnessTestItemDeleteOne) Exec(ctx context.Context) error {
	n, err := sftido.sftid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{schoolfitnesstestitem.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sftido *SchoolFitnessTestItemDeleteOne) ExecX(ctx context.Context) {
	if err := sftido.Exec(ctx); err != nil {
		panic(err)
	}
}
