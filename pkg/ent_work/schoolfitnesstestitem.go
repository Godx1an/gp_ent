// Code generated by ent, DO NOT EDIT.

package ent_work

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Godx1an/gp_ent/pkg/ent_work/schoolfitnesstestitem"
)

// SchoolFitnessTestItem is the model entity for the SchoolFitnessTestItem schema.
type SchoolFitnessTestItem struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// MaxParticipants holds the value of the "max_participants" field.
	MaxParticipants int `json:"max_participants,omitempty"`
	// AvgTimePerPerson holds the value of the "avg_time_per_person" field.
	AvgTimePerPerson int `json:"avg_time_per_person,omitempty"`
	// SchoolID holds the value of the "school_id" field.
	SchoolID int64 `json:"school_id,omitempty"`
	// ItemID holds the value of the "item_id" field.
	ItemID       int64 `json:"item_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SchoolFitnessTestItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case schoolfitnesstestitem.FieldID, schoolfitnesstestitem.FieldCreatedBy, schoolfitnesstestitem.FieldUpdatedBy, schoolfitnesstestitem.FieldMaxParticipants, schoolfitnesstestitem.FieldAvgTimePerPerson, schoolfitnesstestitem.FieldSchoolID, schoolfitnesstestitem.FieldItemID:
			values[i] = new(sql.NullInt64)
		case schoolfitnesstestitem.FieldCreatedAt, schoolfitnesstestitem.FieldUpdatedAt, schoolfitnesstestitem.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SchoolFitnessTestItem fields.
func (sfti *SchoolFitnessTestItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case schoolfitnesstestitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sfti.ID = int64(value.Int64)
		case schoolfitnesstestitem.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				sfti.CreatedBy = value.Int64
			}
		case schoolfitnesstestitem.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				sfti.UpdatedBy = value.Int64
			}
		case schoolfitnesstestitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sfti.CreatedAt = value.Time
			}
		case schoolfitnesstestitem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sfti.UpdatedAt = value.Time
			}
		case schoolfitnesstestitem.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sfti.DeletedAt = value.Time
			}
		case schoolfitnesstestitem.FieldMaxParticipants:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_participants", values[i])
			} else if value.Valid {
				sfti.MaxParticipants = int(value.Int64)
			}
		case schoolfitnesstestitem.FieldAvgTimePerPerson:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field avg_time_per_person", values[i])
			} else if value.Valid {
				sfti.AvgTimePerPerson = int(value.Int64)
			}
		case schoolfitnesstestitem.FieldSchoolID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field school_id", values[i])
			} else if value.Valid {
				sfti.SchoolID = value.Int64
			}
		case schoolfitnesstestitem.FieldItemID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field item_id", values[i])
			} else if value.Valid {
				sfti.ItemID = value.Int64
			}
		default:
			sfti.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SchoolFitnessTestItem.
// This includes values selected through modifiers, order, etc.
func (sfti *SchoolFitnessTestItem) Value(name string) (ent.Value, error) {
	return sfti.selectValues.Get(name)
}

// Update returns a builder for updating this SchoolFitnessTestItem.
// Note that you need to call SchoolFitnessTestItem.Unwrap() before calling this method if this SchoolFitnessTestItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (sfti *SchoolFitnessTestItem) Update() *SchoolFitnessTestItemUpdateOne {
	return NewSchoolFitnessTestItemClient(sfti.config).UpdateOne(sfti)
}

// Unwrap unwraps the SchoolFitnessTestItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sfti *SchoolFitnessTestItem) Unwrap() *SchoolFitnessTestItem {
	_tx, ok := sfti.config.driver.(*txDriver)
	if !ok {
		panic("ent_work: SchoolFitnessTestItem is not a transactional entity")
	}
	sfti.config.driver = _tx.drv
	return sfti
}

// String implements the fmt.Stringer.
func (sfti *SchoolFitnessTestItem) String() string {
	var builder strings.Builder
	builder.WriteString("SchoolFitnessTestItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sfti.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", sfti.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", sfti.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sfti.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sfti.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(sfti.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("max_participants=")
	builder.WriteString(fmt.Sprintf("%v", sfti.MaxParticipants))
	builder.WriteString(", ")
	builder.WriteString("avg_time_per_person=")
	builder.WriteString(fmt.Sprintf("%v", sfti.AvgTimePerPerson))
	builder.WriteString(", ")
	builder.WriteString("school_id=")
	builder.WriteString(fmt.Sprintf("%v", sfti.SchoolID))
	builder.WriteString(", ")
	builder.WriteString("item_id=")
	builder.WriteString(fmt.Sprintf("%v", sfti.ItemID))
	builder.WriteByte(')')
	return builder.String()
}

// SchoolFitnessTestItems is a parsable slice of SchoolFitnessTestItem.
type SchoolFitnessTestItems []*SchoolFitnessTestItem
