// Code generated by ent, DO NOT EDIT.

package ent_work

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Godx1an/gp_ent/pkg/ent_work/fitnesstestitem"
)

// FitnessTestItem is the model entity for the FitnessTestItem schema.
type FitnessTestItem struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// Item holds the value of the "item" field.
	Item         string `json:"item,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FitnessTestItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fitnesstestitem.FieldID, fitnesstestitem.FieldCreatedBy, fitnesstestitem.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case fitnesstestitem.FieldItem:
			values[i] = new(sql.NullString)
		case fitnesstestitem.FieldCreatedAt, fitnesstestitem.FieldUpdatedAt, fitnesstestitem.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FitnessTestItem fields.
func (fti *FitnessTestItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fitnesstestitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fti.ID = int64(value.Int64)
		case fitnesstestitem.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				fti.CreatedBy = value.Int64
			}
		case fitnesstestitem.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				fti.UpdatedBy = value.Int64
			}
		case fitnesstestitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fti.CreatedAt = value.Time
			}
		case fitnesstestitem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fti.UpdatedAt = value.Time
			}
		case fitnesstestitem.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				fti.DeletedAt = value.Time
			}
		case fitnesstestitem.FieldItem:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field item", values[i])
			} else if value.Valid {
				fti.Item = value.String
			}
		default:
			fti.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FitnessTestItem.
// This includes values selected through modifiers, order, etc.
func (fti *FitnessTestItem) Value(name string) (ent.Value, error) {
	return fti.selectValues.Get(name)
}

// Update returns a builder for updating this FitnessTestItem.
// Note that you need to call FitnessTestItem.Unwrap() before calling this method if this FitnessTestItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (fti *FitnessTestItem) Update() *FitnessTestItemUpdateOne {
	return NewFitnessTestItemClient(fti.config).UpdateOne(fti)
}

// Unwrap unwraps the FitnessTestItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fti *FitnessTestItem) Unwrap() *FitnessTestItem {
	_tx, ok := fti.config.driver.(*txDriver)
	if !ok {
		panic("ent_work: FitnessTestItem is not a transactional entity")
	}
	fti.config.driver = _tx.drv
	return fti
}

// String implements the fmt.Stringer.
func (fti *FitnessTestItem) String() string {
	var builder strings.Builder
	builder.WriteString("FitnessTestItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fti.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", fti.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", fti.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fti.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fti.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fti.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("item=")
	builder.WriteString(fti.Item)
	builder.WriteByte(')')
	return builder.String()
}

// FitnessTestItems is a parsable slice of FitnessTestItem.
type FitnessTestItems []*FitnessTestItem
