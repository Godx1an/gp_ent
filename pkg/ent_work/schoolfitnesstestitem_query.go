// Code generated by ent, DO NOT EDIT.

package ent_work

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Godx1an/gp_ent/pkg/ent_work/predicate"
	"github.com/Godx1an/gp_ent/pkg/ent_work/schoolfitnesstestitem"
)

// SchoolFitnessTestItemQuery is the builder for querying SchoolFitnessTestItem entities.
type SchoolFitnessTestItemQuery struct {
	config
	ctx        *QueryContext
	order      []schoolfitnesstestitem.OrderOption
	inters     []Interceptor
	predicates []predicate.SchoolFitnessTestItem
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SchoolFitnessTestItemQuery builder.
func (sftiq *SchoolFitnessTestItemQuery) Where(ps ...predicate.SchoolFitnessTestItem) *SchoolFitnessTestItemQuery {
	sftiq.predicates = append(sftiq.predicates, ps...)
	return sftiq
}

// Limit the number of records to be returned by this query.
func (sftiq *SchoolFitnessTestItemQuery) Limit(limit int) *SchoolFitnessTestItemQuery {
	sftiq.ctx.Limit = &limit
	return sftiq
}

// Offset to start from.
func (sftiq *SchoolFitnessTestItemQuery) Offset(offset int) *SchoolFitnessTestItemQuery {
	sftiq.ctx.Offset = &offset
	return sftiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sftiq *SchoolFitnessTestItemQuery) Unique(unique bool) *SchoolFitnessTestItemQuery {
	sftiq.ctx.Unique = &unique
	return sftiq
}

// Order specifies how the records should be ordered.
func (sftiq *SchoolFitnessTestItemQuery) Order(o ...schoolfitnesstestitem.OrderOption) *SchoolFitnessTestItemQuery {
	sftiq.order = append(sftiq.order, o...)
	return sftiq
}

// First returns the first SchoolFitnessTestItem entity from the query.
// Returns a *NotFoundError when no SchoolFitnessTestItem was found.
func (sftiq *SchoolFitnessTestItemQuery) First(ctx context.Context) (*SchoolFitnessTestItem, error) {
	nodes, err := sftiq.Limit(1).All(setContextOp(ctx, sftiq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{schoolfitnesstestitem.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sftiq *SchoolFitnessTestItemQuery) FirstX(ctx context.Context) *SchoolFitnessTestItem {
	node, err := sftiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SchoolFitnessTestItem ID from the query.
// Returns a *NotFoundError when no SchoolFitnessTestItem ID was found.
func (sftiq *SchoolFitnessTestItemQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = sftiq.Limit(1).IDs(setContextOp(ctx, sftiq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{schoolfitnesstestitem.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sftiq *SchoolFitnessTestItemQuery) FirstIDX(ctx context.Context) int64 {
	id, err := sftiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SchoolFitnessTestItem entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SchoolFitnessTestItem entity is found.
// Returns a *NotFoundError when no SchoolFitnessTestItem entities are found.
func (sftiq *SchoolFitnessTestItemQuery) Only(ctx context.Context) (*SchoolFitnessTestItem, error) {
	nodes, err := sftiq.Limit(2).All(setContextOp(ctx, sftiq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{schoolfitnesstestitem.Label}
	default:
		return nil, &NotSingularError{schoolfitnesstestitem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sftiq *SchoolFitnessTestItemQuery) OnlyX(ctx context.Context) *SchoolFitnessTestItem {
	node, err := sftiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SchoolFitnessTestItem ID in the query.
// Returns a *NotSingularError when more than one SchoolFitnessTestItem ID is found.
// Returns a *NotFoundError when no entities are found.
func (sftiq *SchoolFitnessTestItemQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = sftiq.Limit(2).IDs(setContextOp(ctx, sftiq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{schoolfitnesstestitem.Label}
	default:
		err = &NotSingularError{schoolfitnesstestitem.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sftiq *SchoolFitnessTestItemQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := sftiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SchoolFitnessTestItems.
func (sftiq *SchoolFitnessTestItemQuery) All(ctx context.Context) ([]*SchoolFitnessTestItem, error) {
	ctx = setContextOp(ctx, sftiq.ctx, "All")
	if err := sftiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SchoolFitnessTestItem, *SchoolFitnessTestItemQuery]()
	return withInterceptors[[]*SchoolFitnessTestItem](ctx, sftiq, qr, sftiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sftiq *SchoolFitnessTestItemQuery) AllX(ctx context.Context) []*SchoolFitnessTestItem {
	nodes, err := sftiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SchoolFitnessTestItem IDs.
func (sftiq *SchoolFitnessTestItemQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if sftiq.ctx.Unique == nil && sftiq.path != nil {
		sftiq.Unique(true)
	}
	ctx = setContextOp(ctx, sftiq.ctx, "IDs")
	if err = sftiq.Select(schoolfitnesstestitem.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sftiq *SchoolFitnessTestItemQuery) IDsX(ctx context.Context) []int64 {
	ids, err := sftiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sftiq *SchoolFitnessTestItemQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sftiq.ctx, "Count")
	if err := sftiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sftiq, querierCount[*SchoolFitnessTestItemQuery](), sftiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sftiq *SchoolFitnessTestItemQuery) CountX(ctx context.Context) int {
	count, err := sftiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sftiq *SchoolFitnessTestItemQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sftiq.ctx, "Exist")
	switch _, err := sftiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent_work: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sftiq *SchoolFitnessTestItemQuery) ExistX(ctx context.Context) bool {
	exist, err := sftiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SchoolFitnessTestItemQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sftiq *SchoolFitnessTestItemQuery) Clone() *SchoolFitnessTestItemQuery {
	if sftiq == nil {
		return nil
	}
	return &SchoolFitnessTestItemQuery{
		config:     sftiq.config,
		ctx:        sftiq.ctx.Clone(),
		order:      append([]schoolfitnesstestitem.OrderOption{}, sftiq.order...),
		inters:     append([]Interceptor{}, sftiq.inters...),
		predicates: append([]predicate.SchoolFitnessTestItem{}, sftiq.predicates...),
		// clone intermediate query.
		sql:  sftiq.sql.Clone(),
		path: sftiq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SchoolFitnessTestItem.Query().
//		GroupBy(schoolfitnesstestitem.FieldCreatedBy).
//		Aggregate(ent_work.Count()).
//		Scan(ctx, &v)
func (sftiq *SchoolFitnessTestItemQuery) GroupBy(field string, fields ...string) *SchoolFitnessTestItemGroupBy {
	sftiq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SchoolFitnessTestItemGroupBy{build: sftiq}
	grbuild.flds = &sftiq.ctx.Fields
	grbuild.label = schoolfitnesstestitem.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by"`
//	}
//
//	client.SchoolFitnessTestItem.Query().
//		Select(schoolfitnesstestitem.FieldCreatedBy).
//		Scan(ctx, &v)
func (sftiq *SchoolFitnessTestItemQuery) Select(fields ...string) *SchoolFitnessTestItemSelect {
	sftiq.ctx.Fields = append(sftiq.ctx.Fields, fields...)
	sbuild := &SchoolFitnessTestItemSelect{SchoolFitnessTestItemQuery: sftiq}
	sbuild.label = schoolfitnesstestitem.Label
	sbuild.flds, sbuild.scan = &sftiq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SchoolFitnessTestItemSelect configured with the given aggregations.
func (sftiq *SchoolFitnessTestItemQuery) Aggregate(fns ...AggregateFunc) *SchoolFitnessTestItemSelect {
	return sftiq.Select().Aggregate(fns...)
}

func (sftiq *SchoolFitnessTestItemQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sftiq.inters {
		if inter == nil {
			return fmt.Errorf("ent_work: uninitialized interceptor (forgotten import ent_work/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sftiq); err != nil {
				return err
			}
		}
	}
	for _, f := range sftiq.ctx.Fields {
		if !schoolfitnesstestitem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent_work: invalid field %q for query", f)}
		}
	}
	if sftiq.path != nil {
		prev, err := sftiq.path(ctx)
		if err != nil {
			return err
		}
		sftiq.sql = prev
	}
	return nil
}

func (sftiq *SchoolFitnessTestItemQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SchoolFitnessTestItem, error) {
	var (
		nodes = []*SchoolFitnessTestItem{}
		_spec = sftiq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SchoolFitnessTestItem).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SchoolFitnessTestItem{config: sftiq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(sftiq.modifiers) > 0 {
		_spec.Modifiers = sftiq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sftiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (sftiq *SchoolFitnessTestItemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sftiq.querySpec()
	if len(sftiq.modifiers) > 0 {
		_spec.Modifiers = sftiq.modifiers
	}
	_spec.Node.Columns = sftiq.ctx.Fields
	if len(sftiq.ctx.Fields) > 0 {
		_spec.Unique = sftiq.ctx.Unique != nil && *sftiq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sftiq.driver, _spec)
}

func (sftiq *SchoolFitnessTestItemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(schoolfitnesstestitem.Table, schoolfitnesstestitem.Columns, sqlgraph.NewFieldSpec(schoolfitnesstestitem.FieldID, field.TypeInt64))
	_spec.From = sftiq.sql
	if unique := sftiq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sftiq.path != nil {
		_spec.Unique = true
	}
	if fields := sftiq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, schoolfitnesstestitem.FieldID)
		for i := range fields {
			if fields[i] != schoolfitnesstestitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sftiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sftiq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sftiq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sftiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sftiq *SchoolFitnessTestItemQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sftiq.driver.Dialect())
	t1 := builder.Table(schoolfitnesstestitem.Table)
	columns := sftiq.ctx.Fields
	if len(columns) == 0 {
		columns = schoolfitnesstestitem.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sftiq.sql != nil {
		selector = sftiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sftiq.ctx.Unique != nil && *sftiq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range sftiq.modifiers {
		m(selector)
	}
	for _, p := range sftiq.predicates {
		p(selector)
	}
	for _, p := range sftiq.order {
		p(selector)
	}
	if offset := sftiq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sftiq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sftiq *SchoolFitnessTestItemQuery) Modify(modifiers ...func(s *sql.Selector)) *SchoolFitnessTestItemSelect {
	sftiq.modifiers = append(sftiq.modifiers, modifiers...)
	return sftiq.Select()
}

// SchoolFitnessTestItemGroupBy is the group-by builder for SchoolFitnessTestItem entities.
type SchoolFitnessTestItemGroupBy struct {
	selector
	build *SchoolFitnessTestItemQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sftigb *SchoolFitnessTestItemGroupBy) Aggregate(fns ...AggregateFunc) *SchoolFitnessTestItemGroupBy {
	sftigb.fns = append(sftigb.fns, fns...)
	return sftigb
}

// Scan applies the selector query and scans the result into the given value.
func (sftigb *SchoolFitnessTestItemGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sftigb.build.ctx, "GroupBy")
	if err := sftigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SchoolFitnessTestItemQuery, *SchoolFitnessTestItemGroupBy](ctx, sftigb.build, sftigb, sftigb.build.inters, v)
}

func (sftigb *SchoolFitnessTestItemGroupBy) sqlScan(ctx context.Context, root *SchoolFitnessTestItemQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sftigb.fns))
	for _, fn := range sftigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sftigb.flds)+len(sftigb.fns))
		for _, f := range *sftigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sftigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sftigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SchoolFitnessTestItemSelect is the builder for selecting fields of SchoolFitnessTestItem entities.
type SchoolFitnessTestItemSelect struct {
	*SchoolFitnessTestItemQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sftis *SchoolFitnessTestItemSelect) Aggregate(fns ...AggregateFunc) *SchoolFitnessTestItemSelect {
	sftis.fns = append(sftis.fns, fns...)
	return sftis
}

// Scan applies the selector query and scans the result into the given value.
func (sftis *SchoolFitnessTestItemSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sftis.ctx, "Select")
	if err := sftis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SchoolFitnessTestItemQuery, *SchoolFitnessTestItemSelect](ctx, sftis.SchoolFitnessTestItemQuery, sftis, sftis.inters, v)
}

func (sftis *SchoolFitnessTestItemSelect) sqlScan(ctx context.Context, root *SchoolFitnessTestItemQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sftis.fns))
	for _, fn := range sftis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sftis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sftis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sftis *SchoolFitnessTestItemSelect) Modify(modifiers ...func(s *sql.Selector)) *SchoolFitnessTestItemSelect {
	sftis.modifiers = append(sftis.modifiers, modifiers...)
	return sftis
}
