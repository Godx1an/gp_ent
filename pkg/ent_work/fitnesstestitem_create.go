// Code generated by ent, DO NOT EDIT.

package ent_work

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Godx1an/gp_ent/pkg/ent_work/fitnesstestitem"
)

// FitnessTestItemCreate is the builder for creating a FitnessTestItem entity.
type FitnessTestItemCreate struct {
	config
	mutation *FitnessTestItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (ftic *FitnessTestItemCreate) SetCreatedBy(i int64) *FitnessTestItemCreate {
	ftic.mutation.SetCreatedBy(i)
	return ftic
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ftic *FitnessTestItemCreate) SetNillableCreatedBy(i *int64) *FitnessTestItemCreate {
	if i != nil {
		ftic.SetCreatedBy(*i)
	}
	return ftic
}

// SetUpdatedBy sets the "updated_by" field.
func (ftic *FitnessTestItemCreate) SetUpdatedBy(i int64) *FitnessTestItemCreate {
	ftic.mutation.SetUpdatedBy(i)
	return ftic
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ftic *FitnessTestItemCreate) SetNillableUpdatedBy(i *int64) *FitnessTestItemCreate {
	if i != nil {
		ftic.SetUpdatedBy(*i)
	}
	return ftic
}

// SetCreatedAt sets the "created_at" field.
func (ftic *FitnessTestItemCreate) SetCreatedAt(t time.Time) *FitnessTestItemCreate {
	ftic.mutation.SetCreatedAt(t)
	return ftic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ftic *FitnessTestItemCreate) SetNillableCreatedAt(t *time.Time) *FitnessTestItemCreate {
	if t != nil {
		ftic.SetCreatedAt(*t)
	}
	return ftic
}

// SetUpdatedAt sets the "updated_at" field.
func (ftic *FitnessTestItemCreate) SetUpdatedAt(t time.Time) *FitnessTestItemCreate {
	ftic.mutation.SetUpdatedAt(t)
	return ftic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ftic *FitnessTestItemCreate) SetNillableUpdatedAt(t *time.Time) *FitnessTestItemCreate {
	if t != nil {
		ftic.SetUpdatedAt(*t)
	}
	return ftic
}

// SetDeletedAt sets the "deleted_at" field.
func (ftic *FitnessTestItemCreate) SetDeletedAt(t time.Time) *FitnessTestItemCreate {
	ftic.mutation.SetDeletedAt(t)
	return ftic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ftic *FitnessTestItemCreate) SetNillableDeletedAt(t *time.Time) *FitnessTestItemCreate {
	if t != nil {
		ftic.SetDeletedAt(*t)
	}
	return ftic
}

// SetItem sets the "item" field.
func (ftic *FitnessTestItemCreate) SetItem(s string) *FitnessTestItemCreate {
	ftic.mutation.SetItem(s)
	return ftic
}

// SetID sets the "id" field.
func (ftic *FitnessTestItemCreate) SetID(i int64) *FitnessTestItemCreate {
	ftic.mutation.SetID(i)
	return ftic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ftic *FitnessTestItemCreate) SetNillableID(i *int64) *FitnessTestItemCreate {
	if i != nil {
		ftic.SetID(*i)
	}
	return ftic
}

// Mutation returns the FitnessTestItemMutation object of the builder.
func (ftic *FitnessTestItemCreate) Mutation() *FitnessTestItemMutation {
	return ftic.mutation
}

// Save creates the FitnessTestItem in the database.
func (ftic *FitnessTestItemCreate) Save(ctx context.Context) (*FitnessTestItem, error) {
	ftic.defaults()
	return withHooks(ctx, ftic.sqlSave, ftic.mutation, ftic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ftic *FitnessTestItemCreate) SaveX(ctx context.Context) *FitnessTestItem {
	v, err := ftic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ftic *FitnessTestItemCreate) Exec(ctx context.Context) error {
	_, err := ftic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftic *FitnessTestItemCreate) ExecX(ctx context.Context) {
	if err := ftic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ftic *FitnessTestItemCreate) defaults() {
	if _, ok := ftic.mutation.CreatedBy(); !ok {
		v := fitnesstestitem.DefaultCreatedBy
		ftic.mutation.SetCreatedBy(v)
	}
	if _, ok := ftic.mutation.UpdatedBy(); !ok {
		v := fitnesstestitem.DefaultUpdatedBy
		ftic.mutation.SetUpdatedBy(v)
	}
	if _, ok := ftic.mutation.CreatedAt(); !ok {
		v := fitnesstestitem.DefaultCreatedAt()
		ftic.mutation.SetCreatedAt(v)
	}
	if _, ok := ftic.mutation.UpdatedAt(); !ok {
		v := fitnesstestitem.DefaultUpdatedAt()
		ftic.mutation.SetUpdatedAt(v)
	}
	if _, ok := ftic.mutation.DeletedAt(); !ok {
		v := fitnesstestitem.DefaultDeletedAt
		ftic.mutation.SetDeletedAt(v)
	}
	if _, ok := ftic.mutation.ID(); !ok {
		v := fitnesstestitem.DefaultID()
		ftic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ftic *FitnessTestItemCreate) check() error {
	if _, ok := ftic.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent_work: missing required field "FitnessTestItem.created_by"`)}
	}
	if _, ok := ftic.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent_work: missing required field "FitnessTestItem.updated_by"`)}
	}
	if _, ok := ftic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent_work: missing required field "FitnessTestItem.created_at"`)}
	}
	if _, ok := ftic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent_work: missing required field "FitnessTestItem.updated_at"`)}
	}
	if _, ok := ftic.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent_work: missing required field "FitnessTestItem.deleted_at"`)}
	}
	if _, ok := ftic.mutation.Item(); !ok {
		return &ValidationError{Name: "item", err: errors.New(`ent_work: missing required field "FitnessTestItem.item"`)}
	}
	return nil
}

func (ftic *FitnessTestItemCreate) sqlSave(ctx context.Context) (*FitnessTestItem, error) {
	if err := ftic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ftic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ftic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	ftic.mutation.id = &_node.ID
	ftic.mutation.done = true
	return _node, nil
}

func (ftic *FitnessTestItemCreate) createSpec() (*FitnessTestItem, *sqlgraph.CreateSpec) {
	var (
		_node = &FitnessTestItem{config: ftic.config}
		_spec = sqlgraph.NewCreateSpec(fitnesstestitem.Table, sqlgraph.NewFieldSpec(fitnesstestitem.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = ftic.conflict
	if id, ok := ftic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ftic.mutation.CreatedBy(); ok {
		_spec.SetField(fitnesstestitem.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := ftic.mutation.UpdatedBy(); ok {
		_spec.SetField(fitnesstestitem.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := ftic.mutation.CreatedAt(); ok {
		_spec.SetField(fitnesstestitem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ftic.mutation.UpdatedAt(); ok {
		_spec.SetField(fitnesstestitem.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ftic.mutation.DeletedAt(); ok {
		_spec.SetField(fitnesstestitem.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ftic.mutation.Item(); ok {
		_spec.SetField(fitnesstestitem.FieldItem, field.TypeString, value)
		_node.Item = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FitnessTestItem.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FitnessTestItemUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (ftic *FitnessTestItemCreate) OnConflict(opts ...sql.ConflictOption) *FitnessTestItemUpsertOne {
	ftic.conflict = opts
	return &FitnessTestItemUpsertOne{
		create: ftic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FitnessTestItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ftic *FitnessTestItemCreate) OnConflictColumns(columns ...string) *FitnessTestItemUpsertOne {
	ftic.conflict = append(ftic.conflict, sql.ConflictColumns(columns...))
	return &FitnessTestItemUpsertOne{
		create: ftic,
	}
}

type (
	// FitnessTestItemUpsertOne is the builder for "upsert"-ing
	//  one FitnessTestItem node.
	FitnessTestItemUpsertOne struct {
		create *FitnessTestItemCreate
	}

	// FitnessTestItemUpsert is the "OnConflict" setter.
	FitnessTestItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *FitnessTestItemUpsert) SetCreatedBy(v int64) *FitnessTestItemUpsert {
	u.Set(fitnesstestitem.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *FitnessTestItemUpsert) UpdateCreatedBy() *FitnessTestItemUpsert {
	u.SetExcluded(fitnesstestitem.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *FitnessTestItemUpsert) AddCreatedBy(v int64) *FitnessTestItemUpsert {
	u.Add(fitnesstestitem.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *FitnessTestItemUpsert) SetUpdatedBy(v int64) *FitnessTestItemUpsert {
	u.Set(fitnesstestitem.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *FitnessTestItemUpsert) UpdateUpdatedBy() *FitnessTestItemUpsert {
	u.SetExcluded(fitnesstestitem.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *FitnessTestItemUpsert) AddUpdatedBy(v int64) *FitnessTestItemUpsert {
	u.Add(fitnesstestitem.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FitnessTestItemUpsert) SetUpdatedAt(v time.Time) *FitnessTestItemUpsert {
	u.Set(fitnesstestitem.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FitnessTestItemUpsert) UpdateUpdatedAt() *FitnessTestItemUpsert {
	u.SetExcluded(fitnesstestitem.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FitnessTestItemUpsert) SetDeletedAt(v time.Time) *FitnessTestItemUpsert {
	u.Set(fitnesstestitem.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FitnessTestItemUpsert) UpdateDeletedAt() *FitnessTestItemUpsert {
	u.SetExcluded(fitnesstestitem.FieldDeletedAt)
	return u
}

// SetItem sets the "item" field.
func (u *FitnessTestItemUpsert) SetItem(v string) *FitnessTestItemUpsert {
	u.Set(fitnesstestitem.FieldItem, v)
	return u
}

// UpdateItem sets the "item" field to the value that was provided on create.
func (u *FitnessTestItemUpsert) UpdateItem() *FitnessTestItemUpsert {
	u.SetExcluded(fitnesstestitem.FieldItem)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.FitnessTestItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(fitnesstestitem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FitnessTestItemUpsertOne) UpdateNewValues() *FitnessTestItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(fitnesstestitem.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(fitnesstestitem.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FitnessTestItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FitnessTestItemUpsertOne) Ignore() *FitnessTestItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FitnessTestItemUpsertOne) DoNothing() *FitnessTestItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FitnessTestItemCreate.OnConflict
// documentation for more info.
func (u *FitnessTestItemUpsertOne) Update(set func(*FitnessTestItemUpsert)) *FitnessTestItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FitnessTestItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *FitnessTestItemUpsertOne) SetCreatedBy(v int64) *FitnessTestItemUpsertOne {
	return u.Update(func(s *FitnessTestItemUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *FitnessTestItemUpsertOne) AddCreatedBy(v int64) *FitnessTestItemUpsertOne {
	return u.Update(func(s *FitnessTestItemUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *FitnessTestItemUpsertOne) UpdateCreatedBy() *FitnessTestItemUpsertOne {
	return u.Update(func(s *FitnessTestItemUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *FitnessTestItemUpsertOne) SetUpdatedBy(v int64) *FitnessTestItemUpsertOne {
	return u.Update(func(s *FitnessTestItemUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *FitnessTestItemUpsertOne) AddUpdatedBy(v int64) *FitnessTestItemUpsertOne {
	return u.Update(func(s *FitnessTestItemUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *FitnessTestItemUpsertOne) UpdateUpdatedBy() *FitnessTestItemUpsertOne {
	return u.Update(func(s *FitnessTestItemUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FitnessTestItemUpsertOne) SetUpdatedAt(v time.Time) *FitnessTestItemUpsertOne {
	return u.Update(func(s *FitnessTestItemUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FitnessTestItemUpsertOne) UpdateUpdatedAt() *FitnessTestItemUpsertOne {
	return u.Update(func(s *FitnessTestItemUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FitnessTestItemUpsertOne) SetDeletedAt(v time.Time) *FitnessTestItemUpsertOne {
	return u.Update(func(s *FitnessTestItemUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FitnessTestItemUpsertOne) UpdateDeletedAt() *FitnessTestItemUpsertOne {
	return u.Update(func(s *FitnessTestItemUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetItem sets the "item" field.
func (u *FitnessTestItemUpsertOne) SetItem(v string) *FitnessTestItemUpsertOne {
	return u.Update(func(s *FitnessTestItemUpsert) {
		s.SetItem(v)
	})
}

// UpdateItem sets the "item" field to the value that was provided on create.
func (u *FitnessTestItemUpsertOne) UpdateItem() *FitnessTestItemUpsertOne {
	return u.Update(func(s *FitnessTestItemUpsert) {
		s.UpdateItem()
	})
}

// Exec executes the query.
func (u *FitnessTestItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent_work: missing options for FitnessTestItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FitnessTestItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FitnessTestItemUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FitnessTestItemUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FitnessTestItemCreateBulk is the builder for creating many FitnessTestItem entities in bulk.
type FitnessTestItemCreateBulk struct {
	config
	err      error
	builders []*FitnessTestItemCreate
	conflict []sql.ConflictOption
}

// Save creates the FitnessTestItem entities in the database.
func (fticb *FitnessTestItemCreateBulk) Save(ctx context.Context) ([]*FitnessTestItem, error) {
	if fticb.err != nil {
		return nil, fticb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fticb.builders))
	nodes := make([]*FitnessTestItem, len(fticb.builders))
	mutators := make([]Mutator, len(fticb.builders))
	for i := range fticb.builders {
		func(i int, root context.Context) {
			builder := fticb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FitnessTestItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fticb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fticb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fticb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fticb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fticb *FitnessTestItemCreateBulk) SaveX(ctx context.Context) []*FitnessTestItem {
	v, err := fticb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fticb *FitnessTestItemCreateBulk) Exec(ctx context.Context) error {
	_, err := fticb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fticb *FitnessTestItemCreateBulk) ExecX(ctx context.Context) {
	if err := fticb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FitnessTestItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FitnessTestItemUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (fticb *FitnessTestItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *FitnessTestItemUpsertBulk {
	fticb.conflict = opts
	return &FitnessTestItemUpsertBulk{
		create: fticb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FitnessTestItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fticb *FitnessTestItemCreateBulk) OnConflictColumns(columns ...string) *FitnessTestItemUpsertBulk {
	fticb.conflict = append(fticb.conflict, sql.ConflictColumns(columns...))
	return &FitnessTestItemUpsertBulk{
		create: fticb,
	}
}

// FitnessTestItemUpsertBulk is the builder for "upsert"-ing
// a bulk of FitnessTestItem nodes.
type FitnessTestItemUpsertBulk struct {
	create *FitnessTestItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FitnessTestItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(fitnesstestitem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FitnessTestItemUpsertBulk) UpdateNewValues() *FitnessTestItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(fitnesstestitem.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(fitnesstestitem.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FitnessTestItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FitnessTestItemUpsertBulk) Ignore() *FitnessTestItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FitnessTestItemUpsertBulk) DoNothing() *FitnessTestItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FitnessTestItemCreateBulk.OnConflict
// documentation for more info.
func (u *FitnessTestItemUpsertBulk) Update(set func(*FitnessTestItemUpsert)) *FitnessTestItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FitnessTestItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *FitnessTestItemUpsertBulk) SetCreatedBy(v int64) *FitnessTestItemUpsertBulk {
	return u.Update(func(s *FitnessTestItemUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *FitnessTestItemUpsertBulk) AddCreatedBy(v int64) *FitnessTestItemUpsertBulk {
	return u.Update(func(s *FitnessTestItemUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *FitnessTestItemUpsertBulk) UpdateCreatedBy() *FitnessTestItemUpsertBulk {
	return u.Update(func(s *FitnessTestItemUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *FitnessTestItemUpsertBulk) SetUpdatedBy(v int64) *FitnessTestItemUpsertBulk {
	return u.Update(func(s *FitnessTestItemUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *FitnessTestItemUpsertBulk) AddUpdatedBy(v int64) *FitnessTestItemUpsertBulk {
	return u.Update(func(s *FitnessTestItemUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *FitnessTestItemUpsertBulk) UpdateUpdatedBy() *FitnessTestItemUpsertBulk {
	return u.Update(func(s *FitnessTestItemUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FitnessTestItemUpsertBulk) SetUpdatedAt(v time.Time) *FitnessTestItemUpsertBulk {
	return u.Update(func(s *FitnessTestItemUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FitnessTestItemUpsertBulk) UpdateUpdatedAt() *FitnessTestItemUpsertBulk {
	return u.Update(func(s *FitnessTestItemUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FitnessTestItemUpsertBulk) SetDeletedAt(v time.Time) *FitnessTestItemUpsertBulk {
	return u.Update(func(s *FitnessTestItemUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FitnessTestItemUpsertBulk) UpdateDeletedAt() *FitnessTestItemUpsertBulk {
	return u.Update(func(s *FitnessTestItemUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetItem sets the "item" field.
func (u *FitnessTestItemUpsertBulk) SetItem(v string) *FitnessTestItemUpsertBulk {
	return u.Update(func(s *FitnessTestItemUpsert) {
		s.SetItem(v)
	})
}

// UpdateItem sets the "item" field to the value that was provided on create.
func (u *FitnessTestItemUpsertBulk) UpdateItem() *FitnessTestItemUpsertBulk {
	return u.Update(func(s *FitnessTestItemUpsert) {
		s.UpdateItem()
	})
}

// Exec executes the query.
func (u *FitnessTestItemUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent_work: OnConflict was set for builder %d. Set it on the FitnessTestItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent_work: missing options for FitnessTestItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FitnessTestItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
