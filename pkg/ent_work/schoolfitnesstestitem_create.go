// Code generated by ent, DO NOT EDIT.

package ent_work

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Godx1an/gp_ent/pkg/ent_work/schoolfitnesstestitem"
)

// SchoolFitnessTestItemCreate is the builder for creating a SchoolFitnessTestItem entity.
type SchoolFitnessTestItemCreate struct {
	config
	mutation *SchoolFitnessTestItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (sftic *SchoolFitnessTestItemCreate) SetCreatedBy(i int64) *SchoolFitnessTestItemCreate {
	sftic.mutation.SetCreatedBy(i)
	return sftic
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sftic *SchoolFitnessTestItemCreate) SetNillableCreatedBy(i *int64) *SchoolFitnessTestItemCreate {
	if i != nil {
		sftic.SetCreatedBy(*i)
	}
	return sftic
}

// SetUpdatedBy sets the "updated_by" field.
func (sftic *SchoolFitnessTestItemCreate) SetUpdatedBy(i int64) *SchoolFitnessTestItemCreate {
	sftic.mutation.SetUpdatedBy(i)
	return sftic
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sftic *SchoolFitnessTestItemCreate) SetNillableUpdatedBy(i *int64) *SchoolFitnessTestItemCreate {
	if i != nil {
		sftic.SetUpdatedBy(*i)
	}
	return sftic
}

// SetCreatedAt sets the "created_at" field.
func (sftic *SchoolFitnessTestItemCreate) SetCreatedAt(t time.Time) *SchoolFitnessTestItemCreate {
	sftic.mutation.SetCreatedAt(t)
	return sftic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sftic *SchoolFitnessTestItemCreate) SetNillableCreatedAt(t *time.Time) *SchoolFitnessTestItemCreate {
	if t != nil {
		sftic.SetCreatedAt(*t)
	}
	return sftic
}

// SetUpdatedAt sets the "updated_at" field.
func (sftic *SchoolFitnessTestItemCreate) SetUpdatedAt(t time.Time) *SchoolFitnessTestItemCreate {
	sftic.mutation.SetUpdatedAt(t)
	return sftic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sftic *SchoolFitnessTestItemCreate) SetNillableUpdatedAt(t *time.Time) *SchoolFitnessTestItemCreate {
	if t != nil {
		sftic.SetUpdatedAt(*t)
	}
	return sftic
}

// SetDeletedAt sets the "deleted_at" field.
func (sftic *SchoolFitnessTestItemCreate) SetDeletedAt(t time.Time) *SchoolFitnessTestItemCreate {
	sftic.mutation.SetDeletedAt(t)
	return sftic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sftic *SchoolFitnessTestItemCreate) SetNillableDeletedAt(t *time.Time) *SchoolFitnessTestItemCreate {
	if t != nil {
		sftic.SetDeletedAt(*t)
	}
	return sftic
}

// SetMaxParticipants sets the "max_participants" field.
func (sftic *SchoolFitnessTestItemCreate) SetMaxParticipants(i int) *SchoolFitnessTestItemCreate {
	sftic.mutation.SetMaxParticipants(i)
	return sftic
}

// SetNillableMaxParticipants sets the "max_participants" field if the given value is not nil.
func (sftic *SchoolFitnessTestItemCreate) SetNillableMaxParticipants(i *int) *SchoolFitnessTestItemCreate {
	if i != nil {
		sftic.SetMaxParticipants(*i)
	}
	return sftic
}

// SetAvgTimePerPerson sets the "avg_time_per_person" field.
func (sftic *SchoolFitnessTestItemCreate) SetAvgTimePerPerson(i int) *SchoolFitnessTestItemCreate {
	sftic.mutation.SetAvgTimePerPerson(i)
	return sftic
}

// SetNillableAvgTimePerPerson sets the "avg_time_per_person" field if the given value is not nil.
func (sftic *SchoolFitnessTestItemCreate) SetNillableAvgTimePerPerson(i *int) *SchoolFitnessTestItemCreate {
	if i != nil {
		sftic.SetAvgTimePerPerson(*i)
	}
	return sftic
}

// SetSchoolID sets the "school_id" field.
func (sftic *SchoolFitnessTestItemCreate) SetSchoolID(i int64) *SchoolFitnessTestItemCreate {
	sftic.mutation.SetSchoolID(i)
	return sftic
}

// SetNillableSchoolID sets the "school_id" field if the given value is not nil.
func (sftic *SchoolFitnessTestItemCreate) SetNillableSchoolID(i *int64) *SchoolFitnessTestItemCreate {
	if i != nil {
		sftic.SetSchoolID(*i)
	}
	return sftic
}

// SetItemID sets the "item_id" field.
func (sftic *SchoolFitnessTestItemCreate) SetItemID(i int64) *SchoolFitnessTestItemCreate {
	sftic.mutation.SetItemID(i)
	return sftic
}

// SetNillableItemID sets the "item_id" field if the given value is not nil.
func (sftic *SchoolFitnessTestItemCreate) SetNillableItemID(i *int64) *SchoolFitnessTestItemCreate {
	if i != nil {
		sftic.SetItemID(*i)
	}
	return sftic
}

// SetSchool sets the "school" field.
func (sftic *SchoolFitnessTestItemCreate) SetSchool(s string) *SchoolFitnessTestItemCreate {
	sftic.mutation.SetSchool(s)
	return sftic
}

// SetNillableSchool sets the "school" field if the given value is not nil.
func (sftic *SchoolFitnessTestItemCreate) SetNillableSchool(s *string) *SchoolFitnessTestItemCreate {
	if s != nil {
		sftic.SetSchool(*s)
	}
	return sftic
}

// SetItem sets the "item" field.
func (sftic *SchoolFitnessTestItemCreate) SetItem(s string) *SchoolFitnessTestItemCreate {
	sftic.mutation.SetItem(s)
	return sftic
}

// SetNillableItem sets the "item" field if the given value is not nil.
func (sftic *SchoolFitnessTestItemCreate) SetNillableItem(s *string) *SchoolFitnessTestItemCreate {
	if s != nil {
		sftic.SetItem(*s)
	}
	return sftic
}

// SetID sets the "id" field.
func (sftic *SchoolFitnessTestItemCreate) SetID(i int64) *SchoolFitnessTestItemCreate {
	sftic.mutation.SetID(i)
	return sftic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sftic *SchoolFitnessTestItemCreate) SetNillableID(i *int64) *SchoolFitnessTestItemCreate {
	if i != nil {
		sftic.SetID(*i)
	}
	return sftic
}

// Mutation returns the SchoolFitnessTestItemMutation object of the builder.
func (sftic *SchoolFitnessTestItemCreate) Mutation() *SchoolFitnessTestItemMutation {
	return sftic.mutation
}

// Save creates the SchoolFitnessTestItem in the database.
func (sftic *SchoolFitnessTestItemCreate) Save(ctx context.Context) (*SchoolFitnessTestItem, error) {
	sftic.defaults()
	return withHooks(ctx, sftic.sqlSave, sftic.mutation, sftic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sftic *SchoolFitnessTestItemCreate) SaveX(ctx context.Context) *SchoolFitnessTestItem {
	v, err := sftic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sftic *SchoolFitnessTestItemCreate) Exec(ctx context.Context) error {
	_, err := sftic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sftic *SchoolFitnessTestItemCreate) ExecX(ctx context.Context) {
	if err := sftic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sftic *SchoolFitnessTestItemCreate) defaults() {
	if _, ok := sftic.mutation.CreatedBy(); !ok {
		v := schoolfitnesstestitem.DefaultCreatedBy
		sftic.mutation.SetCreatedBy(v)
	}
	if _, ok := sftic.mutation.UpdatedBy(); !ok {
		v := schoolfitnesstestitem.DefaultUpdatedBy
		sftic.mutation.SetUpdatedBy(v)
	}
	if _, ok := sftic.mutation.CreatedAt(); !ok {
		v := schoolfitnesstestitem.DefaultCreatedAt()
		sftic.mutation.SetCreatedAt(v)
	}
	if _, ok := sftic.mutation.UpdatedAt(); !ok {
		v := schoolfitnesstestitem.DefaultUpdatedAt()
		sftic.mutation.SetUpdatedAt(v)
	}
	if _, ok := sftic.mutation.DeletedAt(); !ok {
		v := schoolfitnesstestitem.DefaultDeletedAt
		sftic.mutation.SetDeletedAt(v)
	}
	if _, ok := sftic.mutation.MaxParticipants(); !ok {
		v := schoolfitnesstestitem.DefaultMaxParticipants
		sftic.mutation.SetMaxParticipants(v)
	}
	if _, ok := sftic.mutation.AvgTimePerPerson(); !ok {
		v := schoolfitnesstestitem.DefaultAvgTimePerPerson
		sftic.mutation.SetAvgTimePerPerson(v)
	}
	if _, ok := sftic.mutation.SchoolID(); !ok {
		v := schoolfitnesstestitem.DefaultSchoolID
		sftic.mutation.SetSchoolID(v)
	}
	if _, ok := sftic.mutation.ItemID(); !ok {
		v := schoolfitnesstestitem.DefaultItemID
		sftic.mutation.SetItemID(v)
	}
	if _, ok := sftic.mutation.School(); !ok {
		v := schoolfitnesstestitem.DefaultSchool
		sftic.mutation.SetSchool(v)
	}
	if _, ok := sftic.mutation.Item(); !ok {
		v := schoolfitnesstestitem.DefaultItem
		sftic.mutation.SetItem(v)
	}
	if _, ok := sftic.mutation.ID(); !ok {
		v := schoolfitnesstestitem.DefaultID()
		sftic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sftic *SchoolFitnessTestItemCreate) check() error {
	if _, ok := sftic.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent_work: missing required field "SchoolFitnessTestItem.created_by"`)}
	}
	if _, ok := sftic.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent_work: missing required field "SchoolFitnessTestItem.updated_by"`)}
	}
	if _, ok := sftic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent_work: missing required field "SchoolFitnessTestItem.created_at"`)}
	}
	if _, ok := sftic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent_work: missing required field "SchoolFitnessTestItem.updated_at"`)}
	}
	if _, ok := sftic.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent_work: missing required field "SchoolFitnessTestItem.deleted_at"`)}
	}
	if _, ok := sftic.mutation.MaxParticipants(); !ok {
		return &ValidationError{Name: "max_participants", err: errors.New(`ent_work: missing required field "SchoolFitnessTestItem.max_participants"`)}
	}
	if _, ok := sftic.mutation.AvgTimePerPerson(); !ok {
		return &ValidationError{Name: "avg_time_per_person", err: errors.New(`ent_work: missing required field "SchoolFitnessTestItem.avg_time_per_person"`)}
	}
	if _, ok := sftic.mutation.SchoolID(); !ok {
		return &ValidationError{Name: "school_id", err: errors.New(`ent_work: missing required field "SchoolFitnessTestItem.school_id"`)}
	}
	if _, ok := sftic.mutation.ItemID(); !ok {
		return &ValidationError{Name: "item_id", err: errors.New(`ent_work: missing required field "SchoolFitnessTestItem.item_id"`)}
	}
	if _, ok := sftic.mutation.School(); !ok {
		return &ValidationError{Name: "school", err: errors.New(`ent_work: missing required field "SchoolFitnessTestItem.school"`)}
	}
	if _, ok := sftic.mutation.Item(); !ok {
		return &ValidationError{Name: "item", err: errors.New(`ent_work: missing required field "SchoolFitnessTestItem.item"`)}
	}
	return nil
}

func (sftic *SchoolFitnessTestItemCreate) sqlSave(ctx context.Context) (*SchoolFitnessTestItem, error) {
	if err := sftic.check(); err != nil {
		return nil, err
	}
	_node, _spec := sftic.createSpec()
	if err := sqlgraph.CreateNode(ctx, sftic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sftic.mutation.id = &_node.ID
	sftic.mutation.done = true
	return _node, nil
}

func (sftic *SchoolFitnessTestItemCreate) createSpec() (*SchoolFitnessTestItem, *sqlgraph.CreateSpec) {
	var (
		_node = &SchoolFitnessTestItem{config: sftic.config}
		_spec = sqlgraph.NewCreateSpec(schoolfitnesstestitem.Table, sqlgraph.NewFieldSpec(schoolfitnesstestitem.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = sftic.conflict
	if id, ok := sftic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sftic.mutation.CreatedBy(); ok {
		_spec.SetField(schoolfitnesstestitem.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := sftic.mutation.UpdatedBy(); ok {
		_spec.SetField(schoolfitnesstestitem.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := sftic.mutation.CreatedAt(); ok {
		_spec.SetField(schoolfitnesstestitem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sftic.mutation.UpdatedAt(); ok {
		_spec.SetField(schoolfitnesstestitem.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sftic.mutation.DeletedAt(); ok {
		_spec.SetField(schoolfitnesstestitem.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := sftic.mutation.MaxParticipants(); ok {
		_spec.SetField(schoolfitnesstestitem.FieldMaxParticipants, field.TypeInt, value)
		_node.MaxParticipants = value
	}
	if value, ok := sftic.mutation.AvgTimePerPerson(); ok {
		_spec.SetField(schoolfitnesstestitem.FieldAvgTimePerPerson, field.TypeInt, value)
		_node.AvgTimePerPerson = value
	}
	if value, ok := sftic.mutation.SchoolID(); ok {
		_spec.SetField(schoolfitnesstestitem.FieldSchoolID, field.TypeInt64, value)
		_node.SchoolID = value
	}
	if value, ok := sftic.mutation.ItemID(); ok {
		_spec.SetField(schoolfitnesstestitem.FieldItemID, field.TypeInt64, value)
		_node.ItemID = value
	}
	if value, ok := sftic.mutation.School(); ok {
		_spec.SetField(schoolfitnesstestitem.FieldSchool, field.TypeString, value)
		_node.School = value
	}
	if value, ok := sftic.mutation.Item(); ok {
		_spec.SetField(schoolfitnesstestitem.FieldItem, field.TypeString, value)
		_node.Item = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SchoolFitnessTestItem.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SchoolFitnessTestItemUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (sftic *SchoolFitnessTestItemCreate) OnConflict(opts ...sql.ConflictOption) *SchoolFitnessTestItemUpsertOne {
	sftic.conflict = opts
	return &SchoolFitnessTestItemUpsertOne{
		create: sftic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SchoolFitnessTestItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sftic *SchoolFitnessTestItemCreate) OnConflictColumns(columns ...string) *SchoolFitnessTestItemUpsertOne {
	sftic.conflict = append(sftic.conflict, sql.ConflictColumns(columns...))
	return &SchoolFitnessTestItemUpsertOne{
		create: sftic,
	}
}

type (
	// SchoolFitnessTestItemUpsertOne is the builder for "upsert"-ing
	//  one SchoolFitnessTestItem node.
	SchoolFitnessTestItemUpsertOne struct {
		create *SchoolFitnessTestItemCreate
	}

	// SchoolFitnessTestItemUpsert is the "OnConflict" setter.
	SchoolFitnessTestItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *SchoolFitnessTestItemUpsert) SetCreatedBy(v int64) *SchoolFitnessTestItemUpsert {
	u.Set(schoolfitnesstestitem.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsert) UpdateCreatedBy() *SchoolFitnessTestItemUpsert {
	u.SetExcluded(schoolfitnesstestitem.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *SchoolFitnessTestItemUpsert) AddCreatedBy(v int64) *SchoolFitnessTestItemUpsert {
	u.Add(schoolfitnesstestitem.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SchoolFitnessTestItemUpsert) SetUpdatedBy(v int64) *SchoolFitnessTestItemUpsert {
	u.Set(schoolfitnesstestitem.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsert) UpdateUpdatedBy() *SchoolFitnessTestItemUpsert {
	u.SetExcluded(schoolfitnesstestitem.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *SchoolFitnessTestItemUpsert) AddUpdatedBy(v int64) *SchoolFitnessTestItemUpsert {
	u.Add(schoolfitnesstestitem.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SchoolFitnessTestItemUpsert) SetUpdatedAt(v time.Time) *SchoolFitnessTestItemUpsert {
	u.Set(schoolfitnesstestitem.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsert) UpdateUpdatedAt() *SchoolFitnessTestItemUpsert {
	u.SetExcluded(schoolfitnesstestitem.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SchoolFitnessTestItemUpsert) SetDeletedAt(v time.Time) *SchoolFitnessTestItemUpsert {
	u.Set(schoolfitnesstestitem.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsert) UpdateDeletedAt() *SchoolFitnessTestItemUpsert {
	u.SetExcluded(schoolfitnesstestitem.FieldDeletedAt)
	return u
}

// SetMaxParticipants sets the "max_participants" field.
func (u *SchoolFitnessTestItemUpsert) SetMaxParticipants(v int) *SchoolFitnessTestItemUpsert {
	u.Set(schoolfitnesstestitem.FieldMaxParticipants, v)
	return u
}

// UpdateMaxParticipants sets the "max_participants" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsert) UpdateMaxParticipants() *SchoolFitnessTestItemUpsert {
	u.SetExcluded(schoolfitnesstestitem.FieldMaxParticipants)
	return u
}

// AddMaxParticipants adds v to the "max_participants" field.
func (u *SchoolFitnessTestItemUpsert) AddMaxParticipants(v int) *SchoolFitnessTestItemUpsert {
	u.Add(schoolfitnesstestitem.FieldMaxParticipants, v)
	return u
}

// SetAvgTimePerPerson sets the "avg_time_per_person" field.
func (u *SchoolFitnessTestItemUpsert) SetAvgTimePerPerson(v int) *SchoolFitnessTestItemUpsert {
	u.Set(schoolfitnesstestitem.FieldAvgTimePerPerson, v)
	return u
}

// UpdateAvgTimePerPerson sets the "avg_time_per_person" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsert) UpdateAvgTimePerPerson() *SchoolFitnessTestItemUpsert {
	u.SetExcluded(schoolfitnesstestitem.FieldAvgTimePerPerson)
	return u
}

// AddAvgTimePerPerson adds v to the "avg_time_per_person" field.
func (u *SchoolFitnessTestItemUpsert) AddAvgTimePerPerson(v int) *SchoolFitnessTestItemUpsert {
	u.Add(schoolfitnesstestitem.FieldAvgTimePerPerson, v)
	return u
}

// SetSchoolID sets the "school_id" field.
func (u *SchoolFitnessTestItemUpsert) SetSchoolID(v int64) *SchoolFitnessTestItemUpsert {
	u.Set(schoolfitnesstestitem.FieldSchoolID, v)
	return u
}

// UpdateSchoolID sets the "school_id" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsert) UpdateSchoolID() *SchoolFitnessTestItemUpsert {
	u.SetExcluded(schoolfitnesstestitem.FieldSchoolID)
	return u
}

// AddSchoolID adds v to the "school_id" field.
func (u *SchoolFitnessTestItemUpsert) AddSchoolID(v int64) *SchoolFitnessTestItemUpsert {
	u.Add(schoolfitnesstestitem.FieldSchoolID, v)
	return u
}

// SetItemID sets the "item_id" field.
func (u *SchoolFitnessTestItemUpsert) SetItemID(v int64) *SchoolFitnessTestItemUpsert {
	u.Set(schoolfitnesstestitem.FieldItemID, v)
	return u
}

// UpdateItemID sets the "item_id" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsert) UpdateItemID() *SchoolFitnessTestItemUpsert {
	u.SetExcluded(schoolfitnesstestitem.FieldItemID)
	return u
}

// AddItemID adds v to the "item_id" field.
func (u *SchoolFitnessTestItemUpsert) AddItemID(v int64) *SchoolFitnessTestItemUpsert {
	u.Add(schoolfitnesstestitem.FieldItemID, v)
	return u
}

// SetSchool sets the "school" field.
func (u *SchoolFitnessTestItemUpsert) SetSchool(v string) *SchoolFitnessTestItemUpsert {
	u.Set(schoolfitnesstestitem.FieldSchool, v)
	return u
}

// UpdateSchool sets the "school" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsert) UpdateSchool() *SchoolFitnessTestItemUpsert {
	u.SetExcluded(schoolfitnesstestitem.FieldSchool)
	return u
}

// SetItem sets the "item" field.
func (u *SchoolFitnessTestItemUpsert) SetItem(v string) *SchoolFitnessTestItemUpsert {
	u.Set(schoolfitnesstestitem.FieldItem, v)
	return u
}

// UpdateItem sets the "item" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsert) UpdateItem() *SchoolFitnessTestItemUpsert {
	u.SetExcluded(schoolfitnesstestitem.FieldItem)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SchoolFitnessTestItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(schoolfitnesstestitem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SchoolFitnessTestItemUpsertOne) UpdateNewValues() *SchoolFitnessTestItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(schoolfitnesstestitem.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(schoolfitnesstestitem.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SchoolFitnessTestItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SchoolFitnessTestItemUpsertOne) Ignore() *SchoolFitnessTestItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SchoolFitnessTestItemUpsertOne) DoNothing() *SchoolFitnessTestItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SchoolFitnessTestItemCreate.OnConflict
// documentation for more info.
func (u *SchoolFitnessTestItemUpsertOne) Update(set func(*SchoolFitnessTestItemUpsert)) *SchoolFitnessTestItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SchoolFitnessTestItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *SchoolFitnessTestItemUpsertOne) SetCreatedBy(v int64) *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *SchoolFitnessTestItemUpsertOne) AddCreatedBy(v int64) *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsertOne) UpdateCreatedBy() *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SchoolFitnessTestItemUpsertOne) SetUpdatedBy(v int64) *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *SchoolFitnessTestItemUpsertOne) AddUpdatedBy(v int64) *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsertOne) UpdateUpdatedBy() *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SchoolFitnessTestItemUpsertOne) SetUpdatedAt(v time.Time) *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsertOne) UpdateUpdatedAt() *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SchoolFitnessTestItemUpsertOne) SetDeletedAt(v time.Time) *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsertOne) UpdateDeletedAt() *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetMaxParticipants sets the "max_participants" field.
func (u *SchoolFitnessTestItemUpsertOne) SetMaxParticipants(v int) *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.SetMaxParticipants(v)
	})
}

// AddMaxParticipants adds v to the "max_participants" field.
func (u *SchoolFitnessTestItemUpsertOne) AddMaxParticipants(v int) *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.AddMaxParticipants(v)
	})
}

// UpdateMaxParticipants sets the "max_participants" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsertOne) UpdateMaxParticipants() *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.UpdateMaxParticipants()
	})
}

// SetAvgTimePerPerson sets the "avg_time_per_person" field.
func (u *SchoolFitnessTestItemUpsertOne) SetAvgTimePerPerson(v int) *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.SetAvgTimePerPerson(v)
	})
}

// AddAvgTimePerPerson adds v to the "avg_time_per_person" field.
func (u *SchoolFitnessTestItemUpsertOne) AddAvgTimePerPerson(v int) *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.AddAvgTimePerPerson(v)
	})
}

// UpdateAvgTimePerPerson sets the "avg_time_per_person" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsertOne) UpdateAvgTimePerPerson() *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.UpdateAvgTimePerPerson()
	})
}

// SetSchoolID sets the "school_id" field.
func (u *SchoolFitnessTestItemUpsertOne) SetSchoolID(v int64) *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.SetSchoolID(v)
	})
}

// AddSchoolID adds v to the "school_id" field.
func (u *SchoolFitnessTestItemUpsertOne) AddSchoolID(v int64) *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.AddSchoolID(v)
	})
}

// UpdateSchoolID sets the "school_id" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsertOne) UpdateSchoolID() *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.UpdateSchoolID()
	})
}

// SetItemID sets the "item_id" field.
func (u *SchoolFitnessTestItemUpsertOne) SetItemID(v int64) *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.SetItemID(v)
	})
}

// AddItemID adds v to the "item_id" field.
func (u *SchoolFitnessTestItemUpsertOne) AddItemID(v int64) *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.AddItemID(v)
	})
}

// UpdateItemID sets the "item_id" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsertOne) UpdateItemID() *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.UpdateItemID()
	})
}

// SetSchool sets the "school" field.
func (u *SchoolFitnessTestItemUpsertOne) SetSchool(v string) *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.SetSchool(v)
	})
}

// UpdateSchool sets the "school" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsertOne) UpdateSchool() *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.UpdateSchool()
	})
}

// SetItem sets the "item" field.
func (u *SchoolFitnessTestItemUpsertOne) SetItem(v string) *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.SetItem(v)
	})
}

// UpdateItem sets the "item" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsertOne) UpdateItem() *SchoolFitnessTestItemUpsertOne {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.UpdateItem()
	})
}

// Exec executes the query.
func (u *SchoolFitnessTestItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent_work: missing options for SchoolFitnessTestItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SchoolFitnessTestItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SchoolFitnessTestItemUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SchoolFitnessTestItemUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SchoolFitnessTestItemCreateBulk is the builder for creating many SchoolFitnessTestItem entities in bulk.
type SchoolFitnessTestItemCreateBulk struct {
	config
	err      error
	builders []*SchoolFitnessTestItemCreate
	conflict []sql.ConflictOption
}

// Save creates the SchoolFitnessTestItem entities in the database.
func (sfticb *SchoolFitnessTestItemCreateBulk) Save(ctx context.Context) ([]*SchoolFitnessTestItem, error) {
	if sfticb.err != nil {
		return nil, sfticb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sfticb.builders))
	nodes := make([]*SchoolFitnessTestItem, len(sfticb.builders))
	mutators := make([]Mutator, len(sfticb.builders))
	for i := range sfticb.builders {
		func(i int, root context.Context) {
			builder := sfticb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SchoolFitnessTestItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sfticb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sfticb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sfticb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sfticb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sfticb *SchoolFitnessTestItemCreateBulk) SaveX(ctx context.Context) []*SchoolFitnessTestItem {
	v, err := sfticb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sfticb *SchoolFitnessTestItemCreateBulk) Exec(ctx context.Context) error {
	_, err := sfticb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfticb *SchoolFitnessTestItemCreateBulk) ExecX(ctx context.Context) {
	if err := sfticb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SchoolFitnessTestItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SchoolFitnessTestItemUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (sfticb *SchoolFitnessTestItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *SchoolFitnessTestItemUpsertBulk {
	sfticb.conflict = opts
	return &SchoolFitnessTestItemUpsertBulk{
		create: sfticb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SchoolFitnessTestItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sfticb *SchoolFitnessTestItemCreateBulk) OnConflictColumns(columns ...string) *SchoolFitnessTestItemUpsertBulk {
	sfticb.conflict = append(sfticb.conflict, sql.ConflictColumns(columns...))
	return &SchoolFitnessTestItemUpsertBulk{
		create: sfticb,
	}
}

// SchoolFitnessTestItemUpsertBulk is the builder for "upsert"-ing
// a bulk of SchoolFitnessTestItem nodes.
type SchoolFitnessTestItemUpsertBulk struct {
	create *SchoolFitnessTestItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SchoolFitnessTestItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(schoolfitnesstestitem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SchoolFitnessTestItemUpsertBulk) UpdateNewValues() *SchoolFitnessTestItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(schoolfitnesstestitem.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(schoolfitnesstestitem.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SchoolFitnessTestItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SchoolFitnessTestItemUpsertBulk) Ignore() *SchoolFitnessTestItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SchoolFitnessTestItemUpsertBulk) DoNothing() *SchoolFitnessTestItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SchoolFitnessTestItemCreateBulk.OnConflict
// documentation for more info.
func (u *SchoolFitnessTestItemUpsertBulk) Update(set func(*SchoolFitnessTestItemUpsert)) *SchoolFitnessTestItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SchoolFitnessTestItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *SchoolFitnessTestItemUpsertBulk) SetCreatedBy(v int64) *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *SchoolFitnessTestItemUpsertBulk) AddCreatedBy(v int64) *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsertBulk) UpdateCreatedBy() *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SchoolFitnessTestItemUpsertBulk) SetUpdatedBy(v int64) *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *SchoolFitnessTestItemUpsertBulk) AddUpdatedBy(v int64) *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsertBulk) UpdateUpdatedBy() *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SchoolFitnessTestItemUpsertBulk) SetUpdatedAt(v time.Time) *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsertBulk) UpdateUpdatedAt() *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SchoolFitnessTestItemUpsertBulk) SetDeletedAt(v time.Time) *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsertBulk) UpdateDeletedAt() *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetMaxParticipants sets the "max_participants" field.
func (u *SchoolFitnessTestItemUpsertBulk) SetMaxParticipants(v int) *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.SetMaxParticipants(v)
	})
}

// AddMaxParticipants adds v to the "max_participants" field.
func (u *SchoolFitnessTestItemUpsertBulk) AddMaxParticipants(v int) *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.AddMaxParticipants(v)
	})
}

// UpdateMaxParticipants sets the "max_participants" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsertBulk) UpdateMaxParticipants() *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.UpdateMaxParticipants()
	})
}

// SetAvgTimePerPerson sets the "avg_time_per_person" field.
func (u *SchoolFitnessTestItemUpsertBulk) SetAvgTimePerPerson(v int) *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.SetAvgTimePerPerson(v)
	})
}

// AddAvgTimePerPerson adds v to the "avg_time_per_person" field.
func (u *SchoolFitnessTestItemUpsertBulk) AddAvgTimePerPerson(v int) *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.AddAvgTimePerPerson(v)
	})
}

// UpdateAvgTimePerPerson sets the "avg_time_per_person" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsertBulk) UpdateAvgTimePerPerson() *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.UpdateAvgTimePerPerson()
	})
}

// SetSchoolID sets the "school_id" field.
func (u *SchoolFitnessTestItemUpsertBulk) SetSchoolID(v int64) *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.SetSchoolID(v)
	})
}

// AddSchoolID adds v to the "school_id" field.
func (u *SchoolFitnessTestItemUpsertBulk) AddSchoolID(v int64) *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.AddSchoolID(v)
	})
}

// UpdateSchoolID sets the "school_id" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsertBulk) UpdateSchoolID() *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.UpdateSchoolID()
	})
}

// SetItemID sets the "item_id" field.
func (u *SchoolFitnessTestItemUpsertBulk) SetItemID(v int64) *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.SetItemID(v)
	})
}

// AddItemID adds v to the "item_id" field.
func (u *SchoolFitnessTestItemUpsertBulk) AddItemID(v int64) *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.AddItemID(v)
	})
}

// UpdateItemID sets the "item_id" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsertBulk) UpdateItemID() *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.UpdateItemID()
	})
}

// SetSchool sets the "school" field.
func (u *SchoolFitnessTestItemUpsertBulk) SetSchool(v string) *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.SetSchool(v)
	})
}

// UpdateSchool sets the "school" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsertBulk) UpdateSchool() *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.UpdateSchool()
	})
}

// SetItem sets the "item" field.
func (u *SchoolFitnessTestItemUpsertBulk) SetItem(v string) *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.SetItem(v)
	})
}

// UpdateItem sets the "item" field to the value that was provided on create.
func (u *SchoolFitnessTestItemUpsertBulk) UpdateItem() *SchoolFitnessTestItemUpsertBulk {
	return u.Update(func(s *SchoolFitnessTestItemUpsert) {
		s.UpdateItem()
	})
}

// Exec executes the query.
func (u *SchoolFitnessTestItemUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent_work: OnConflict was set for builder %d. Set it on the SchoolFitnessTestItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent_work: missing options for SchoolFitnessTestItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SchoolFitnessTestItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
