// Code generated by ent, DO NOT EDIT.

package schoolfitnesstestitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Godx1an/gp_ent/pkg/ent_work/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldEQ(FieldDeletedAt, v))
}

// MaxParticipants applies equality check predicate on the "max_participants" field. It's identical to MaxParticipantsEQ.
func MaxParticipants(v int) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldEQ(FieldMaxParticipants, v))
}

// AvgTimePerPerson applies equality check predicate on the "avg_time_per_person" field. It's identical to AvgTimePerPersonEQ.
func AvgTimePerPerson(v int) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldEQ(FieldAvgTimePerPerson, v))
}

// SchoolID applies equality check predicate on the "school_id" field. It's identical to SchoolIDEQ.
func SchoolID(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldEQ(FieldSchoolID, v))
}

// ItemID applies equality check predicate on the "item_id" field. It's identical to ItemIDEQ.
func ItemID(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldEQ(FieldItemID, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldLTE(FieldUpdatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldLTE(FieldDeletedAt, v))
}

// MaxParticipantsEQ applies the EQ predicate on the "max_participants" field.
func MaxParticipantsEQ(v int) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldEQ(FieldMaxParticipants, v))
}

// MaxParticipantsNEQ applies the NEQ predicate on the "max_participants" field.
func MaxParticipantsNEQ(v int) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldNEQ(FieldMaxParticipants, v))
}

// MaxParticipantsIn applies the In predicate on the "max_participants" field.
func MaxParticipantsIn(vs ...int) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldIn(FieldMaxParticipants, vs...))
}

// MaxParticipantsNotIn applies the NotIn predicate on the "max_participants" field.
func MaxParticipantsNotIn(vs ...int) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldNotIn(FieldMaxParticipants, vs...))
}

// MaxParticipantsGT applies the GT predicate on the "max_participants" field.
func MaxParticipantsGT(v int) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldGT(FieldMaxParticipants, v))
}

// MaxParticipantsGTE applies the GTE predicate on the "max_participants" field.
func MaxParticipantsGTE(v int) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldGTE(FieldMaxParticipants, v))
}

// MaxParticipantsLT applies the LT predicate on the "max_participants" field.
func MaxParticipantsLT(v int) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldLT(FieldMaxParticipants, v))
}

// MaxParticipantsLTE applies the LTE predicate on the "max_participants" field.
func MaxParticipantsLTE(v int) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldLTE(FieldMaxParticipants, v))
}

// AvgTimePerPersonEQ applies the EQ predicate on the "avg_time_per_person" field.
func AvgTimePerPersonEQ(v int) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldEQ(FieldAvgTimePerPerson, v))
}

// AvgTimePerPersonNEQ applies the NEQ predicate on the "avg_time_per_person" field.
func AvgTimePerPersonNEQ(v int) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldNEQ(FieldAvgTimePerPerson, v))
}

// AvgTimePerPersonIn applies the In predicate on the "avg_time_per_person" field.
func AvgTimePerPersonIn(vs ...int) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldIn(FieldAvgTimePerPerson, vs...))
}

// AvgTimePerPersonNotIn applies the NotIn predicate on the "avg_time_per_person" field.
func AvgTimePerPersonNotIn(vs ...int) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldNotIn(FieldAvgTimePerPerson, vs...))
}

// AvgTimePerPersonGT applies the GT predicate on the "avg_time_per_person" field.
func AvgTimePerPersonGT(v int) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldGT(FieldAvgTimePerPerson, v))
}

// AvgTimePerPersonGTE applies the GTE predicate on the "avg_time_per_person" field.
func AvgTimePerPersonGTE(v int) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldGTE(FieldAvgTimePerPerson, v))
}

// AvgTimePerPersonLT applies the LT predicate on the "avg_time_per_person" field.
func AvgTimePerPersonLT(v int) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldLT(FieldAvgTimePerPerson, v))
}

// AvgTimePerPersonLTE applies the LTE predicate on the "avg_time_per_person" field.
func AvgTimePerPersonLTE(v int) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldLTE(FieldAvgTimePerPerson, v))
}

// SchoolIDEQ applies the EQ predicate on the "school_id" field.
func SchoolIDEQ(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldEQ(FieldSchoolID, v))
}

// SchoolIDNEQ applies the NEQ predicate on the "school_id" field.
func SchoolIDNEQ(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldNEQ(FieldSchoolID, v))
}

// SchoolIDIn applies the In predicate on the "school_id" field.
func SchoolIDIn(vs ...int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldIn(FieldSchoolID, vs...))
}

// SchoolIDNotIn applies the NotIn predicate on the "school_id" field.
func SchoolIDNotIn(vs ...int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldNotIn(FieldSchoolID, vs...))
}

// SchoolIDGT applies the GT predicate on the "school_id" field.
func SchoolIDGT(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldGT(FieldSchoolID, v))
}

// SchoolIDGTE applies the GTE predicate on the "school_id" field.
func SchoolIDGTE(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldGTE(FieldSchoolID, v))
}

// SchoolIDLT applies the LT predicate on the "school_id" field.
func SchoolIDLT(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldLT(FieldSchoolID, v))
}

// SchoolIDLTE applies the LTE predicate on the "school_id" field.
func SchoolIDLTE(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldLTE(FieldSchoolID, v))
}

// ItemIDEQ applies the EQ predicate on the "item_id" field.
func ItemIDEQ(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldEQ(FieldItemID, v))
}

// ItemIDNEQ applies the NEQ predicate on the "item_id" field.
func ItemIDNEQ(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldNEQ(FieldItemID, v))
}

// ItemIDIn applies the In predicate on the "item_id" field.
func ItemIDIn(vs ...int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldIn(FieldItemID, vs...))
}

// ItemIDNotIn applies the NotIn predicate on the "item_id" field.
func ItemIDNotIn(vs ...int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldNotIn(FieldItemID, vs...))
}

// ItemIDGT applies the GT predicate on the "item_id" field.
func ItemIDGT(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldGT(FieldItemID, v))
}

// ItemIDGTE applies the GTE predicate on the "item_id" field.
func ItemIDGTE(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldGTE(FieldItemID, v))
}

// ItemIDLT applies the LT predicate on the "item_id" field.
func ItemIDLT(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldLT(FieldItemID, v))
}

// ItemIDLTE applies the LTE predicate on the "item_id" field.
func ItemIDLTE(v int64) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.FieldLTE(FieldItemID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SchoolFitnessTestItem) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SchoolFitnessTestItem) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SchoolFitnessTestItem) predicate.SchoolFitnessTestItem {
	return predicate.SchoolFitnessTestItem(sql.NotPredicates(p))
}
