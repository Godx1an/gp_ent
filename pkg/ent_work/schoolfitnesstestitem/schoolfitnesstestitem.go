// Code generated by ent, DO NOT EDIT.

package schoolfitnesstestitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the schoolfitnesstestitem type in the database.
	Label = "school_fitness_test_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldMaxParticipants holds the string denoting the max_participants field in the database.
	FieldMaxParticipants = "max_participants"
	// FieldAvgTimePerPerson holds the string denoting the avg_time_per_person field in the database.
	FieldAvgTimePerPerson = "avg_time_per_person"
	// FieldSchoolID holds the string denoting the school_id field in the database.
	FieldSchoolID = "school_id"
	// FieldItemID holds the string denoting the item_id field in the database.
	FieldItemID = "item_id"
	// Table holds the table name of the schoolfitnesstestitem in the database.
	Table = "school_fitness_test_items"
)

// Columns holds all SQL columns for schoolfitnesstestitem fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldMaxParticipants,
	FieldAvgTimePerPerson,
	FieldSchoolID,
	FieldItemID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedBy holds the default value on creation for the "created_by" field.
	DefaultCreatedBy int64
	// DefaultUpdatedBy holds the default value on creation for the "updated_by" field.
	DefaultUpdatedBy int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// DefaultMaxParticipants holds the default value on creation for the "max_participants" field.
	DefaultMaxParticipants int
	// DefaultAvgTimePerPerson holds the default value on creation for the "avg_time_per_person" field.
	DefaultAvgTimePerPerson int
	// DefaultSchoolID holds the default value on creation for the "school_id" field.
	DefaultSchoolID int64
	// DefaultItemID holds the default value on creation for the "item_id" field.
	DefaultItemID int64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

// OrderOption defines the ordering options for the SchoolFitnessTestItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByMaxParticipants orders the results by the max_participants field.
func ByMaxParticipants(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxParticipants, opts...).ToFunc()
}

// ByAvgTimePerPerson orders the results by the avg_time_per_person field.
func ByAvgTimePerPerson(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvgTimePerPerson, opts...).ToFunc()
}

// BySchoolID orders the results by the school_id field.
func BySchoolID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSchoolID, opts...).ToFunc()
}

// ByItemID orders the results by the item_id field.
func ByItemID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldItemID, opts...).ToFunc()
}
